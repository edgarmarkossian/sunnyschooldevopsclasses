K8S commands

1.Create pod from file pod.yaml
	-> kubectl create -f pod.yaml 

2.Delete pod nginx
	-> kubectl delete pod nginx     

3.Edit pod nginx 
	-> kubectl edit pod nginx          

4.Apply changes on pod.yaml (restarts and recreates)
	-> kubectl apply -f pod.yaml 

5.Get pod
	-> kubectl get pod (if we need namespaces kubectl -n [namespaceName] get pod)

6.Describe pod nginx
	-> kubectl describe pod nginx            

7.Exec ubuntu container in nginx pod(nginx, ubuntu)
	-> kubectl exec -ti nginx -c ubuntu -- bash 

8.Info about pod
	-> kubectl get pods -o wide

9.Connect to pod's container
	9.1 Up another container and call -> curl http://ip.of.first.container
	* As pod is logical point, we CAN'T CONNECT to Pod, we CAN CONNECT to Container

10.To up k8s cluster on 5 computers in same network
	10.1 Set up cluster: mikrok8s.io or k3s / single node / test
	10.2 kubeadm(you gonna have eternal load balancer)/ k8s bare metal: metalib.universe.tf

Imperative commands:

11.Create replicaset
	-> kubectl create -f rs.yml

12.Get ReplicaSet
	-> kubectl get rs(replicaset)

13.Delete ReplicaSet
	-> kubectl delete rs nginx-rs (also deletes all underlying PODs)

14.Get all information
	-> kubectl get all

15.When RS name changes we need to use replace
	-> kubectl replace -f rs.yaml

16.Imperative(without apply) replica scale (bad practice)
	-> kubectl scale --replicas=6 -f rs.yaml
	-> kubectl scale --replicas=6 replicaset nginx-rs


Deplyoment (same syntax as replicaset -> deployment.yaml)
17.Create deployment
	-> kubectl create -f deployment.yaml
	-> kubectl apply -f deployment.yaml

18.Get deployment
	-> kubectl get deployments

19.When we update deployment image, it deletes old replicaset and points to new replicaset with sam pod count

20.Rollout to another revision(replicaset)
	-> kubectl rollout status deployment/nginx-deployment

21.Get rollout history
	-> kubectl rollout history deployment/nginx-deployment

22. Imperative(without apply) image change (bad practice)
	-> kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1

23.The pods are going up to the last version of replicaset image's version | 1.9.1 -> latest (bad practise)
	-> kubectl rollout undo deployment/nginx-deployment

24.Up imperatively nginx deployment
	-> kubectl run nginx --iamge=nginx

Namespaces(default, kube-public, kube-system)
Namespaces can separate applications by some logic or environment or policy instead of up cluster)

25.Get namespaces
	-> kubectl get ns
	etcd - saves kubernetes info

26.Get all ns-es with resource types
	-> kubectl -n kube-system get all

27.Create namespace
	-> kubectl create namespace [edgar]

28.Imperatively deploy deployment in [edgar] ns
	-> kubectl -n edgar apply -f deployment.yaml

29.Deploy deployment ny adding ns in metadata
	*yaml* -> namespace: [edgar]

30.Delete namespace
	-> kubectl delete ns [edgar]

*We can create quotas on namespaces for limiting resources (4 CPU, 2GB RAM)
*We can create rolebase access control(permission for deleting or editing)
*We can create ns then up different deps/pods/apps etc, then delete ns and all this data will be deleted (testing)

31.Create quota
	-> kubectl create -f quota.yaml

DaemonSet
DaemonSet ups pods with number nodes(on every node -> one pod)/no replicaset


Services(abstract layer which works with ip tables/kube proxy)
32.Get/create
	-> kubectl apply -f service.yaml
	-> kubectl get svc
	

33.For call pod from another namespace/serv/cluster
								   V     V     V
	 -> curl http://nginx-service.edgar.svc.cluster.local

* ENTRYPOINT -> command , CMD -> args


Limits (ON POD)

request -> tell pod how much memory and cpu can it use(reservation)/ in case of not setting request - app could be not to run
	memory: "64Mi" -> megabyte
	cpu: "250m" -> milicore(1/4 core)

limit -> max capacity
	memory: 128Mi" -> megabyte (if > 128, pod restarts)
	cpu: "500m" -> milicore (if > 500, pod restarts)

34.Enable metrics server


Environments
35.For creating Resource
	-> kubectl apply -f env-configmap.yaml

36.For getting configmap
	-> kubectl get configmap

Readiness/Liveness
37. For getting logs
	-> kubectl logs nginx-deployment-5c6c78d6f6-ftzsc  

38.Troubleshooting tool
	-> kubectl get events

39.Enable metrics-server
	-> minikube addons enable metrics-server
	-> kubectl top node/pod

40. Filter pods by some cryterias
	-> kubectl get pods --selector app=v1


Persistent volume(claim)
41.update the reclaim policy of a Persistent Volume (PV)
	-> kubectl patch pv [pv_name] -p '{"spec":{"persistentVolumeReclaimPolicy":"Recycle"}}'

42.Set up NGINX with sample traffic on Amazon EKS and Kubernetes
	https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContainerInsights-Prometheus-Sample-Workloads-nginx.html
	
43. Check pod create/delete access for user
	-> kubectl auth can-i create pod
	-> kubectl auth can-i delete pod
	-> kubectl auth can-i create pods --as dev-user